# acn_git_hooks_deploy_id 27a929811c6f53eca43f13012488a88b92df4003
import subprocess
import argparse
import platform
import os 
import re
import sys
import io

def ignoreFile(filename, patterns):
    config_files = [".pre-commit-override.ini"]                                         # List of precommit config files to ignore
    # if filename in patterns["ignore_file_list"] or filename in config_files:
    if filename in config_files:
        return True
    else:
        return False

def getSecretsPatterns(ini_file_path):
    try:
        import configparser
    except ImportError:
        import ConfigParser as configparser
    patterns = {}
    tiers = ["tier1", "tier2"]
    config = configparser.ConfigParser()
    config.read(ini_file_path)                                                          # Parse the ini file of tiers and patterns
    
    for tier in tiers:                                                                  # Create flat list of tiers
        for pattern in config.get("disallow_word_list", tier).split("\n"):
            if pattern:
                patterns[pattern] = tier                                                # Build dictionary of patterns => tier
    # patterns["ignore_file_list"] = config.get("ignore_file_list", "files").split("\n")  # Create flat list of files to ignore
    
    return patterns, tiers                                                              # Return patterns dictionary and list of tiers

def detectTier(pattern, patterns, line_num, detected_files, current_file):
    tier = patterns[pattern]                                                            # Get tier of matched pattern
    if current_file not in detected_files[tier].keys():
        detected_files[tier][current_file] = [line_num+1]                               # Create new entry in dictionary for the file and line number - e.g. tier1 => secrets.txt = [2]
    else:
        detected_files[tier][current_file].append(line_num+1)                           # Include line number of additional secret discovered - e.g. tier1 => secrets.txt = [2, 24]

def lookThroughFile(current_file, patterns, detected_files):
    encoding = getEncoding()
    with io.open(current_file, 'r', encoding=encoding) as f:
        try:
            for line_num, line in enumerate(f):                                         # Go through file line by line
                if line.strip("\n"):                                                    # Only check lines with content
                    for pattern in patterns.keys():                                     # Check against all patterns
                        if re.search(pattern, line):
                            detectTier(pattern, patterns, line_num, detected_files, current_file)
        except (UnicodeDecodeError, UnicodeError) as e:
            print("[WARN] File "+current_file+" is encoded in an unsupported format and was not checked!")

def checkForSecrets(filenames, patterns, tiers):
    detected_files = {}
    for tier in tiers:
        detected_files[tier] = {}                                                       # Intialise the detected files dictionary = e.g. { tier1 => {}, tier2 => {} }
    for committed_file in filenames:
        if ignoreFile(committed_file, patterns):
            continue                                                                    # Skip the file if it is in the ignore list
        elif committed_file.strip() == "":
            continue
        elif os.path.isdir(committed_file):                                             # Skip the file if it is a directory (in the case of git submodules)
            continue
        else:
            lookThroughFile(committed_file, patterns, detected_files)                   # Search file for secrets
    return detected_files

def print_message(severity, tier, filename, lines):
    severity = severity.upper()
    tier = re.findall(r'\d+', tier)[0]                                                  # Extract tier number from string
    print("["+severity+"] Tier "+tier+" secret(s) found in file '"+filename+"' - check lines "+str(lines))

def resolvePath(path):
    if path[0] == "~":    
        user_home = os.path.expanduser("~")
        path = user_home+path[1:]
    return path

def checkForOverride():
    config_dir = resolvePath(os.environ['CONFIG_DIRECTORY'])
    if os.path.isfile(".pre-commit-override.ini"):
        cwd = os.getcwd()
        return cwd+"/.pre-commit-override.ini"
    elif os.path.isfile(config_dir+"/private/private_secrets_dictionary.ini"):
        return config_dir+"/private/private_secrets_dictionary.ini"
    else:
        return config_dir+"/public_secrets_dictionary.ini"

def getEncoding():
    system = platform.system()
    if system == "Windows":
        return 'utf-16'
    else:
        # linux / mac
        return 'utf-8'

def main():
    return_code = 0
    committed_files = subprocess.check_output(["git", "diff", "--name-only", "--cached", "--diff-filter=ACMRT"]).decode().split('\n')
    config_ini_file = checkForOverride()
    patterns = {}
    tiers = []
    try:
        patterns, tiers = getSecretsPatterns(config_ini_file)                           # Parse the ini file for secret patterns and tiers
    except:
        print("[ERROR] Invalid syntax in configuration ini file.")
        sys.exit(1)
    detected_files = checkForSecrets(committed_files, patterns, tiers)
    
    if detected_files:
        for tier, detected_secrets in detected_files.items():
            for filename, lines in detected_secrets.items():
                if tier == "tier1":                                                     # Highest severity results in ERROR
                    print_message("error", tier, filename, lines)
                    return_code = 1
                else:
                    print_message("warn", tier, filename, lines)

    return return_code

if __name__ == '__main__':
    exit(main())